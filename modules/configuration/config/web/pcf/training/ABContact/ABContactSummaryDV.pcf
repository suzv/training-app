<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <DetailViewPanel
    editable="true"
    id="ABContactSummaryDV">
    <Require
      name="anABContact"
      type="ABContact"/>
    <InputColumn>
      <Label
        label="DisplayKey.get(&quot;Contact.BasicInformation&quot;)"/>
      <TextInput
        id="Tipo"
        label="DisplayKey.get(&quot;Contact.Tipo&quot;)"
        value="anABContact.Subtype.toString()"/>
      <TextInput
        id="Name"
        label="DisplayKey.get(&quot;Contact.Name&quot;)"
        value="anABContact.DisplayName"/>
      <TextInput
        editable="true"
        id="NameC"
        label="DisplayKey.get(&quot;Training.Name&quot;)"
        required="true"
        value="(anABContact as ABCompany).Name"
        visible="if(InEditMode &amp;&amp; anABContact typeis ABCompany){return true}else{return false}"/>
      <TextInput
        editable="true"
        id="FirstName"
        label="DisplayKey.get(&quot;Contact.FirstName&quot;)"
        required="true"
        value="(anABContact as ABPerson).FirstName"
        visible="if(InEditMode &amp;&amp; anABContact typeis ABPerson){return true}else{return false}"/>
      <TextInput
        editable="true"
        id="LastName"
        label="DisplayKey.get(&quot;Contact.LastName&quot;)"
        required="true"
        value="(anABContact as ABPerson).LastName"
        visible="if(InEditMode &amp;&amp; anABContact typeis ABPerson){return true}else{return false}"/>
      <TypeKeyRadioInput
        id="ContactNacionalidad"
        label="DisplayKey.get(&quot;Contact.Nacionality&quot;)"
        required="true"
        value="anABContact.Nacionalidad"
        valueType="typekey.Nacionalidad"
        visible="if(anABContact typeis ABCompany){return false}else{return true}">
        <PostOnChange/>
      </TypeKeyRadioInput>
      <TextInput
        id="Rut"
        label="&quot;RUT&quot;"
        required="true"
        validationExpression="if (acmelab.ta.webservice.contact.RutValidation.validate(anABContact.RUT)) {if (anABContact.isDuplicate(anABContact.RUT) == false){return null} else {return &quot;El RUT ingresado ya existe.&quot;} } else return &quot;El RUT no es valido.&quot;"
        value="anABContact.RUT"
        visible="if(anABContact.Nacionalidad == Nacionalidad.TC_CHILE){return true}else{return false}"/>
      <TextInput
        id="ContactPassport"
        label="DisplayKey.get(&quot;Contact.Passport&quot;)"
        required="true"
        value="anABContact.RUT"
        visible="if(anABContact typeis ABCompany){return false}else{if(anABContact typeis ABPerson){if (anABContact.Nacionalidad == Nacionalidad.TC_EXTRANJERO){return true}else{return false}}return true}"/>
      <InputDivider/>
      <TextInput
        editable="true"
        id="EmailIn"
        label="&quot;Email&quot;"
        required="true"
        value="anABContact.EmailAddress1"
        visible="true"/>
      <TextInput
        id="ContactID"
        label="DisplayKey.get(&quot;Contact.PublicID&quot;)"
        value="anABContact.PublicID"/>
      <RangeInput
        editable="true"
        id="AssignedUser"
        label="DisplayKey.get(&quot;Training.AssignedUser&quot;)"
        value="anABContact.AssignedUser"
        valueRange="queryForContactManagers()"
        valueType="User"
        visible="false"/>
      <TypeKeyInput
        editable="true"
        id="PaisIn"
        label="DisplayKey.get(&quot;Contact.Country&quot;)"
        required="true"
        value="anABContact.CountrySel"
        valueType="typekey.Country"
        visible="true">
        <PostOnChange/>
      </TypeKeyInput>
      <TypeKeyInput
        editable="true"
        id="RegionIn"
        label="DisplayKey.get(&quot;Contact.Region&quot;)"
        required="true"
        value="anABContact.Region"
        valueType="typekey.Regions_Ext"
        visible="if(anABContact.CountrySel == Country.TC_CL){return true}else{return false}">
        <PostOnChange/>
      </TypeKeyInput>
      <TextInput
        editable="true"
        id="ContactDireccion"
        label="DisplayKey.get(&quot;Contact.Address&quot;)"
        required="true"
        value="anABContact.Direccion"
        visible="if(anABContact.CountrySel == null){return false}else{return true}"/>
      <TextInput
        editable="true"
        id="ContactCodigoPostal"
        label="DisplayKey.get(&quot;Contact.PostalCode&quot;)"
        regex="&quot;[0-9]{7}&quot;"
        required="true"
        value="anABContact.CodigoPostal"
        visible="if(anABContact.CountrySel == null){return false}else{return true}">
        <PostOnChange/>
      </TextInput>
      <DateInput
        id="DateOfBirth"
        label="DisplayKey.get(&quot;Contact.DateOfBirth&quot;)"
        required="true"
        validationExpression="if (anABContact.isUnderAge((anABContact as ABPerson).DateOfBirth )) return &quot;No cumple con la mayor&#237;a de edad.&quot; else return null"
        value="(anABContact as ABPerson).DateOfBirth"
        visible="if(anABContact typeis ABPerson){return true}else{return false}"/>
      <TextInput
        id="Edad"
        label="DisplayKey.get(&quot;Contact.Age&quot;)"
        value="(anABContact as ABPerson).AgeReal"
        visible="if(anABContact typeis ABPerson){return true}else{return false}"/>
      <TypeKeyInput
        editable="true"
        id="Gender"
        label="DisplayKey.get(&quot;Contact.Gender&quot;)"
        value="(anABContact as ABPerson).Gender"
        valueType="typekey.GenderType"
        visible="if(anABContact typeis ABCompany){return false}else{return true}"/>
      <DateInput
        id="CreateTime"
        label="DisplayKey.get(&quot;Training.CreatedOn&quot;)"
        value="anABContact.CreateTime"
        visible="false"/>
      <InputDivider/>
      <Label
        id="PrimaryAddressLabel"
        label="DisplayKey.get(&quot;Training.PrimaryAddress&quot;)"
        visible="false"/>
      <InputSetRef
        def="AddressOwnerInputSet(new gw.api.address.SecondaryAddressOwner(anABContact.PrimaryAddress), true)"
        visible="false"/>
      <RangeInput
        editable="true"
        id="ContactTier"
        label="&quot;Contact Tier&quot;"
        value="anABContact.ContactTier"
        valueRange="typekey.ContactTier.AllTypeKeys"
        valueType="typekey.ContactTier"
        visible="false"/>
    </InputColumn>
    <InputColumn>
      <TextInput
        id="CreditScore"
        label="DisplayKey.get(&quot;Training.CreditScore&quot;)"
        value="acmelab.ta.webservice.contact.CreditScoreWS.setContactCreditScore(anABContact.RUT)"
        valueType="java.lang.Integer"
        visible="false"/>
      <ListViewInput
        boldLabel="true"
        def="FlagEntriesLV(anABContact)"
        id="FlagEntriesLV"
        label="DisplayKey.get(&quot;Training.FlagEntries&quot;)"
        labelAbove="true"
        visible="false">
        <Toolbar/>
      </ListViewInput>
    </InputColumn>
    <Code><![CDATA[uses gw.api.util.DisplayableException

/* This function is used to populate the Employer dynamic dropdown.
*/
function queryForContactManagers () : gw.api.database.IQueryBeanResult<entity.User> {

  // Query for all roles with the name "Contact Manager". (There is only one.)                
  var roleQuery = gw.api.database.Query.make(Role)
  roleQuery.compare("Name", Equals, "Contact Manager")
  
  // Query for all instances of UserRole that point to the "Contact Manager" role
  // from the previous query.
  var userRoleQuery = gw.api.database.Query.make(UserRole)
  userRoleQuery.subselect("Role", CompareIn, roleQuery, "ID")
  
  // Query for all users which are referenced by the UserRole instances from
  // the query above. (That is, the UserRole instances that also point to
  // "Contact Manager".
  var userQuery = gw.api.database.Query.make(User)
  userQuery.subselect("ID", CompareIn, userRoleQuery, "User")                  
  
  // Execute the query and return the results.     
  var resultSet = userQuery.select()
  return resultSet
  
}


]]></Code>
  </DetailViewPanel>
</PCF>